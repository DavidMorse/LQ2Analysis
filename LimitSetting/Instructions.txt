###########################################################################
##    Instructions for using NTupleAnalyzer Limit-Setting Features       ##
##         Darin Baumgartel - Nov 29, 2011 - darinb@cern.ch              ##
###########################################################################

These instructions are for setting up the portion of the LQ2 NTuple Analyzer
which uses the Higgs Combine package to run limit setting on an LQ Analysis 
using a set of input datacards. 

The Higgs Combine package has further documentation at:
https://twiki.cern.ch/twiki/bin/view/CMS/SWGuideHiggsAnalysisCombinedLimit


1) Check out the package on SLC6. If you haven't already: 

    export SCRAM_ARCH=slc6_amd64_gcc491
    cmsrel CMSSW_7_4_7
    cd CMSSW_7_4_7/src 
    cmsenv
    git clone https://github.com/cms-analysis/HiggsAnalysis-CombinedLimit.git HiggsAnalysis/CombinedLimit
    cd HiggsAnalysis/CombinedLimit
    cd $CMSSW_BASE/src/HiggsAnalysis/CombinedLimit
    git fetch origin
    git checkout v6.2.1
    scramv1 b clean; scramv1 b # always make a clean build, as scram doesn't always see updates to src/LinkDef.h

    cd ../../
    combine --help

   You should see all of the options for the combine facility.
   
   If you intend to run vector samples, with large cross-sections, you may need to increase the precision of the printouts of the limits. 
   From the CMSSW src directory, do:
   
   sed -i 's#6.4#9.9#g' ./HiggsAnalysis/CombinedLimit/src/Asymptotic.cc
   scram b -j 16
   cd ../../


2) Set up the data-card information for all the LQ Masses/channels. 

   The combine facility runs on input datacards, and the limit calculations are
   based one one-line commands using those input datacards. For many masses/channels
   it is useful to organize everything and have a short python script which 
   submits to batch and gathers the output. In this step we will organize all the
   input datacards. 
   
   Ultimately we will use a python script to facilitate all this, so let's keep all
   the data-card information in a single text file called 'FinalCardsLQ.txt'.
   
   Model this after an example at: NTupleAnalyzerV2/tools/HiggsLimit/SingleChannel/FinalCards_Example.txt
   
   Each card in the text file will start with a name like 'LQ_BetaHalf_M_250.txt' or 'LQ_M_250.txt'. 
   Keep these name conventions as such changing only the mass values. 
   
   The rest of the card structure is documented at: https://twiki.cern.ch/twiki/bin/view/CMS/SWGuideHiggsAnalysisCombinedLimit
   I summarize briefly:
   
    The channel info first ....
    * imax 1  - number of channels  (1 for our single channel analyses)
    * jmax 5  - number of backgrounds
    * kmax 13  - number of nuisance parameters, including statistical uncertainties for each channel
    
    The infor on the processes (signal and backgrounds ... )
    * bin  1 1 1 1 1 1 -  identifies the channel the process belongs to (only 1 channel for now...)
    * observation 431 - number of observed events in data passing selection
    * process LQ_BetaHalf_M_250 DiBoson ....  - name for our processes we wil list
    * process 0 1 2 3 4 5 - An integer index for each process
    * rate ... tells the expected yield of events in the specified bin and process 
   
    The nuisance parameter info
    
    e.g. jet energy scale: 
    * Jes  lnN  1.049 ... - The name (Jes) and the integration (lnN=lognormal) and 1 + fractional uncertainty. 
    
    
    
	If statistics are low, for statistical uncertainties you can use gamma-function (gmM) integration, and would list
	* name gmM (number MC events)  weight_1 weight_2 weight_3 weight_4 ...
	
	
	Important note on correlations:
	
	If systematics are listed on the same row as (1+fractional uncertainty), they are considered correlated. Hence all 
	our JES systematics are full correlated. 
	Systematics on different rows are uncorrelated, hence JES and MES are uncorrelated, and all statistical uncertainties
	are uncorrelated. 

   
##################################################
#                                                #                
#    QUICK RESULTS WITH ASYMPTOTIC CLS           #
#                                                #
##################################################

#
#   FOR SIGMA VS M LIMIT PLOTS  
#

0) Follow steps (1) and (2) of the normal method above to set up the working area and make your FinalCards.txt

1) Put your normal "FinalCards.txt" in the SingleChanel directory and run the individual channel limits with:

    python RunStatsBasicCLs.py --do_BetaOne --do_BetaHalf -c LimitTest --Asymptotic_Only
       
	Results will print to screen.
	


#
#   FOR COMBINATION BETA VS M LIMIT PLOTS 
#


2) You can also run the Combination asymptotically. Every beta value takes about as long as step (1), and 
   it's good to use many beta values. So a quick fix is to batch this. 
   
   A) First run the script that submits the jobs to batch. This will fill text files of results into a newly created 
      "BatcherResults" directory.   
   
       python AsympBatcher.py --do_Combo -q 8nh -n 1 -c LimitTest --Asymptotic_Only

   B) When Jobs from (A) are done, run the additional script to scan the contents of the "BatcherResults" directory. Results output to screen.
  
       python AsympBatcherParser.py 
       
       
##################################################
#                                                #                
#    Vector LQ and RPV Susy Limits               #
#                                                #
##################################################       

The RunStatsBasicCLS.py has been udpated for sigma-vs-mass limits on vector LQ and RPV susy. You will see new hard-coded cross
section values in the script now. To use these, there are certain flags, and a slight tweak to the FinalCards file. 

Whereas scalar leptoquarks use a 'FinalCardsLQ.txt' file, which contains signal denoted 'LQ', vector leptoquark samples 
will be donated with 'YM','MM','MC', or 'AM', depending on the coupling scenario. RPV Susy ssamples are denoted 'RV'. 

So, for instance, if you have a FinalCards file for YM coupling vector leptoquarks, it should be calleed 'FinalCardsYM.txt'
and it should list cards like 'YM_M_300.txt' inside it, and have process name like "process  YM_M_300". Basically, all
instances of 'LQ' become 'YM'. 

Now, just run the RunStatsBasicCLs.py script as you normally would, but using flags for the different signal types. e.g.:

python RunStatsBasicCLs.py --do_BetaOne --do_BetaHalf -c LimitTest --Asymptotic_Only --vectorYM
python RunStatsBasicCLs.py --do_BetaOne --do_BetaHalf -c LimitTest --Asymptotic_Only --vectorAM
python RunStatsBasicCLs.py --do_BetaOne --do_BetaHalf -c LimitTest --Asymptotic_Only --vectorMM
python RunStatsBasicCLs.py --do_BetaOne --do_BetaHalf -c LimitTest --Asymptotic_Only --vectorMC

or for RPV susy:

python RunStatsBasicCLs.py --do_BetaOne -c LimitTest --Asymptotic_Only --susyRV





Other notes:
Vector lq cross sections: https://twiki.cern.ch/twiki/pub/Main/LQPairSecondGen8TeVOutline/CrossSectionLogVerbose_OfficialRequest.html
Susy cross sections: https://twiki.cern.ch/twiki/bin/view/LHCPhysics/SUSYCrossSections8TeVstopsbottom
